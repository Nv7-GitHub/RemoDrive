// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoDriveClient is the client API for RemoDrive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoDriveClient interface {
	Drive(ctx context.Context, opts ...grpc.CallOption) (RemoDrive_DriveClient, error)
	Host(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (RemoDrive_HostClient, error)
	CloseRoom(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remoDriveClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoDriveClient(cc grpc.ClientConnInterface) RemoDriveClient {
	return &remoDriveClient{cc}
}

func (c *remoDriveClient) Drive(ctx context.Context, opts ...grpc.CallOption) (RemoDrive_DriveClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoDrive_ServiceDesc.Streams[0], "/remodrive.RemoDrive/Drive", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoDriveDriveClient{stream}
	return x, nil
}

type RemoDrive_DriveClient interface {
	Send(*DriverMessage) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type remoDriveDriveClient struct {
	grpc.ClientStream
}

func (x *remoDriveDriveClient) Send(m *DriverMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoDriveDriveClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoDriveClient) Host(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (RemoDrive_HostClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoDrive_ServiceDesc.Streams[1], "/remodrive.RemoDrive/Host", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoDriveHostClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RemoDrive_HostClient interface {
	Recv() (*DriverMessage, error)
	grpc.ClientStream
}

type remoDriveHostClient struct {
	grpc.ClientStream
}

func (x *remoDriveHostClient) Recv() (*DriverMessage, error) {
	m := new(DriverMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoDriveClient) CloseRoom(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remodrive.RemoDrive/CloseRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoDriveServer is the server API for RemoDrive service.
// All implementations must embed UnimplementedRemoDriveServer
// for forward compatibility
type RemoDriveServer interface {
	Drive(RemoDrive_DriveServer) error
	Host(*wrapperspb.StringValue, RemoDrive_HostServer) error
	CloseRoom(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	mustEmbedUnimplementedRemoDriveServer()
}

// UnimplementedRemoDriveServer must be embedded to have forward compatible implementations.
type UnimplementedRemoDriveServer struct {
}

func (UnimplementedRemoDriveServer) Drive(RemoDrive_DriveServer) error {
	return status.Errorf(codes.Unimplemented, "method Drive not implemented")
}
func (UnimplementedRemoDriveServer) Host(*wrapperspb.StringValue, RemoDrive_HostServer) error {
	return status.Errorf(codes.Unimplemented, "method Host not implemented")
}
func (UnimplementedRemoDriveServer) CloseRoom(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseRoom not implemented")
}
func (UnimplementedRemoDriveServer) mustEmbedUnimplementedRemoDriveServer() {}

// UnsafeRemoDriveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoDriveServer will
// result in compilation errors.
type UnsafeRemoDriveServer interface {
	mustEmbedUnimplementedRemoDriveServer()
}

func RegisterRemoDriveServer(s grpc.ServiceRegistrar, srv RemoDriveServer) {
	s.RegisterService(&RemoDrive_ServiceDesc, srv)
}

func _RemoDrive_Drive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoDriveServer).Drive(&remoDriveDriveServer{stream})
}

type RemoDrive_DriveServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*DriverMessage, error)
	grpc.ServerStream
}

type remoDriveDriveServer struct {
	grpc.ServerStream
}

func (x *remoDriveDriveServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoDriveDriveServer) Recv() (*DriverMessage, error) {
	m := new(DriverMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RemoDrive_Host_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoDriveServer).Host(m, &remoDriveHostServer{stream})
}

type RemoDrive_HostServer interface {
	Send(*DriverMessage) error
	grpc.ServerStream
}

type remoDriveHostServer struct {
	grpc.ServerStream
}

func (x *remoDriveHostServer) Send(m *DriverMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _RemoDrive_CloseRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoDriveServer).CloseRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remodrive.RemoDrive/CloseRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoDriveServer).CloseRoom(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoDrive_ServiceDesc is the grpc.ServiceDesc for RemoDrive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoDrive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remodrive.RemoDrive",
	HandlerType: (*RemoDriveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseRoom",
			Handler:    _RemoDrive_CloseRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Drive",
			Handler:       _RemoDrive_Drive_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Host",
			Handler:       _RemoDrive_Host_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "remodrive.proto",
}
